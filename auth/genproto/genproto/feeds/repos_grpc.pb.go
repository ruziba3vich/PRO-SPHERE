// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: feeds/repos.proto

package feeds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoriesService_CreateFeedCategory_FullMethodName   = "/repo.CategoriesService/CreateFeedCategory"
	CategoriesService_GetFeedCategoryByID_FullMethodName  = "/repo.CategoriesService/GetFeedCategoryByID"
	CategoriesService_UpdateFeedCategory_FullMethodName   = "/repo.CategoriesService/UpdateFeedCategory"
	CategoriesService_DeleteFeedCategory_FullMethodName   = "/repo.CategoriesService/DeleteFeedCategory"
	CategoriesService_GetAllFeedCategories_FullMethodName = "/repo.CategoriesService/GetAllFeedCategories"
)

// CategoriesServiceClient is the client API for CategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServiceClient interface {
	CreateFeedCategory(ctx context.Context, in *CreateFeedCategoryRequest, opts ...grpc.CallOption) (*FeedCategory, error)
	GetFeedCategoryByID(ctx context.Context, in *GetFeedCategoryByIDRequest, opts ...grpc.CallOption) (*FeedCategory, error)
	UpdateFeedCategory(ctx context.Context, in *FeedCategory, opts ...grpc.CallOption) (*FeedCategory, error)
	DeleteFeedCategory(ctx context.Context, in *DeleteFeedCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllFeedCategories(ctx context.Context, in *GetAllFeedCategoriesRequest, opts ...grpc.CallOption) (*FeedCategoriesResponse, error)
}

type categoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServiceClient(cc grpc.ClientConnInterface) CategoriesServiceClient {
	return &categoriesServiceClient{cc}
}

func (c *categoriesServiceClient) CreateFeedCategory(ctx context.Context, in *CreateFeedCategoryRequest, opts ...grpc.CallOption) (*FeedCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedCategory)
	err := c.cc.Invoke(ctx, CategoriesService_CreateFeedCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) GetFeedCategoryByID(ctx context.Context, in *GetFeedCategoryByIDRequest, opts ...grpc.CallOption) (*FeedCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedCategory)
	err := c.cc.Invoke(ctx, CategoriesService_GetFeedCategoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) UpdateFeedCategory(ctx context.Context, in *FeedCategory, opts ...grpc.CallOption) (*FeedCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedCategory)
	err := c.cc.Invoke(ctx, CategoriesService_UpdateFeedCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) DeleteFeedCategory(ctx context.Context, in *DeleteFeedCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CategoriesService_DeleteFeedCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) GetAllFeedCategories(ctx context.Context, in *GetAllFeedCategoriesRequest, opts ...grpc.CallOption) (*FeedCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedCategoriesResponse)
	err := c.cc.Invoke(ctx, CategoriesService_GetAllFeedCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriesServiceServer is the server API for CategoriesService service.
// All implementations must embed UnimplementedCategoriesServiceServer
// for forward compatibility.
type CategoriesServiceServer interface {
	CreateFeedCategory(context.Context, *CreateFeedCategoryRequest) (*FeedCategory, error)
	GetFeedCategoryByID(context.Context, *GetFeedCategoryByIDRequest) (*FeedCategory, error)
	UpdateFeedCategory(context.Context, *FeedCategory) (*FeedCategory, error)
	DeleteFeedCategory(context.Context, *DeleteFeedCategoryRequest) (*EmptyResponse, error)
	GetAllFeedCategories(context.Context, *GetAllFeedCategoriesRequest) (*FeedCategoriesResponse, error)
	mustEmbedUnimplementedCategoriesServiceServer()
}

// UnimplementedCategoriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoriesServiceServer struct{}

func (UnimplementedCategoriesServiceServer) CreateFeedCategory(context.Context, *CreateFeedCategoryRequest) (*FeedCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedCategory not implemented")
}
func (UnimplementedCategoriesServiceServer) GetFeedCategoryByID(context.Context, *GetFeedCategoryByIDRequest) (*FeedCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedCategoryByID not implemented")
}
func (UnimplementedCategoriesServiceServer) UpdateFeedCategory(context.Context, *FeedCategory) (*FeedCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedCategory not implemented")
}
func (UnimplementedCategoriesServiceServer) DeleteFeedCategory(context.Context, *DeleteFeedCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedCategory not implemented")
}
func (UnimplementedCategoriesServiceServer) GetAllFeedCategories(context.Context, *GetAllFeedCategoriesRequest) (*FeedCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeedCategories not implemented")
}
func (UnimplementedCategoriesServiceServer) mustEmbedUnimplementedCategoriesServiceServer() {}
func (UnimplementedCategoriesServiceServer) testEmbeddedByValue()                           {}

// UnsafeCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServiceServer will
// result in compilation errors.
type UnsafeCategoriesServiceServer interface {
	mustEmbedUnimplementedCategoriesServiceServer()
}

func RegisterCategoriesServiceServer(s grpc.ServiceRegistrar, srv CategoriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoriesService_ServiceDesc, srv)
}

func _CategoriesService_CreateFeedCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).CreateFeedCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_CreateFeedCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).CreateFeedCategory(ctx, req.(*CreateFeedCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_GetFeedCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).GetFeedCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_GetFeedCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).GetFeedCategoryByID(ctx, req.(*GetFeedCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_UpdateFeedCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).UpdateFeedCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_UpdateFeedCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).UpdateFeedCategory(ctx, req.(*FeedCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_DeleteFeedCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).DeleteFeedCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_DeleteFeedCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).DeleteFeedCategory(ctx, req.(*DeleteFeedCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_GetAllFeedCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFeedCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).GetAllFeedCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_GetAllFeedCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).GetAllFeedCategories(ctx, req.(*GetAllFeedCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoriesService_ServiceDesc is the grpc.ServiceDesc for CategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repo.CategoriesService",
	HandlerType: (*CategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedCategory",
			Handler:    _CategoriesService_CreateFeedCategory_Handler,
		},
		{
			MethodName: "GetFeedCategoryByID",
			Handler:    _CategoriesService_GetFeedCategoryByID_Handler,
		},
		{
			MethodName: "UpdateFeedCategory",
			Handler:    _CategoriesService_UpdateFeedCategory_Handler,
		},
		{
			MethodName: "DeleteFeedCategory",
			Handler:    _CategoriesService_DeleteFeedCategory_Handler,
		},
		{
			MethodName: "GetAllFeedCategories",
			Handler:    _CategoriesService_GetAllFeedCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeds/repos.proto",
}

const (
	FeedItemsService_CreateFeedItem_FullMethodName  = "/repo.FeedItemsService/CreateFeedItem"
	FeedItemsService_GetFeedItemByID_FullMethodName = "/repo.FeedItemsService/GetFeedItemByID"
	FeedItemsService_UpdateFeedItem_FullMethodName  = "/repo.FeedItemsService/UpdateFeedItem"
	FeedItemsService_DeleteFeedItem_FullMethodName  = "/repo.FeedItemsService/DeleteFeedItem"
	FeedItemsService_GetAllFeedItems_FullMethodName = "/repo.FeedItemsService/GetAllFeedItems"
)

// FeedItemsServiceClient is the client API for FeedItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedItemsServiceClient interface {
	CreateFeedItem(ctx context.Context, in *FeedItem, opts ...grpc.CallOption) (*FeedItemResponse, error)
	GetFeedItemByID(ctx context.Context, in *GetFeedItemByIDRequest, opts ...grpc.CallOption) (*FeedItemResponse, error)
	UpdateFeedItem(ctx context.Context, in *UpdateItem, opts ...grpc.CallOption) (*FeedItemResponse, error)
	DeleteFeedItem(ctx context.Context, in *DeleteFeedItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllFeedItems(ctx context.Context, in *GetAllFeedItemsRequest, opts ...grpc.CallOption) (*FeedItemsResponse, error)
}

type feedItemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedItemsServiceClient(cc grpc.ClientConnInterface) FeedItemsServiceClient {
	return &feedItemsServiceClient{cc}
}

func (c *feedItemsServiceClient) CreateFeedItem(ctx context.Context, in *FeedItem, opts ...grpc.CallOption) (*FeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItemResponse)
	err := c.cc.Invoke(ctx, FeedItemsService_CreateFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsServiceClient) GetFeedItemByID(ctx context.Context, in *GetFeedItemByIDRequest, opts ...grpc.CallOption) (*FeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItemResponse)
	err := c.cc.Invoke(ctx, FeedItemsService_GetFeedItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsServiceClient) UpdateFeedItem(ctx context.Context, in *UpdateItem, opts ...grpc.CallOption) (*FeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItemResponse)
	err := c.cc.Invoke(ctx, FeedItemsService_UpdateFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsServiceClient) DeleteFeedItem(ctx context.Context, in *DeleteFeedItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, FeedItemsService_DeleteFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsServiceClient) GetAllFeedItems(ctx context.Context, in *GetAllFeedItemsRequest, opts ...grpc.CallOption) (*FeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedItemsResponse)
	err := c.cc.Invoke(ctx, FeedItemsService_GetAllFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedItemsServiceServer is the server API for FeedItemsService service.
// All implementations must embed UnimplementedFeedItemsServiceServer
// for forward compatibility.
type FeedItemsServiceServer interface {
	CreateFeedItem(context.Context, *FeedItem) (*FeedItemResponse, error)
	GetFeedItemByID(context.Context, *GetFeedItemByIDRequest) (*FeedItemResponse, error)
	UpdateFeedItem(context.Context, *UpdateItem) (*FeedItemResponse, error)
	DeleteFeedItem(context.Context, *DeleteFeedItemRequest) (*EmptyResponse, error)
	GetAllFeedItems(context.Context, *GetAllFeedItemsRequest) (*FeedItemsResponse, error)
	mustEmbedUnimplementedFeedItemsServiceServer()
}

// UnimplementedFeedItemsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedItemsServiceServer struct{}

func (UnimplementedFeedItemsServiceServer) CreateFeedItem(context.Context, *FeedItem) (*FeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedItem not implemented")
}
func (UnimplementedFeedItemsServiceServer) GetFeedItemByID(context.Context, *GetFeedItemByIDRequest) (*FeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItemByID not implemented")
}
func (UnimplementedFeedItemsServiceServer) UpdateFeedItem(context.Context, *UpdateItem) (*FeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedItem not implemented")
}
func (UnimplementedFeedItemsServiceServer) DeleteFeedItem(context.Context, *DeleteFeedItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedItem not implemented")
}
func (UnimplementedFeedItemsServiceServer) GetAllFeedItems(context.Context, *GetAllFeedItemsRequest) (*FeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeedItems not implemented")
}
func (UnimplementedFeedItemsServiceServer) mustEmbedUnimplementedFeedItemsServiceServer() {}
func (UnimplementedFeedItemsServiceServer) testEmbeddedByValue()                          {}

// UnsafeFeedItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedItemsServiceServer will
// result in compilation errors.
type UnsafeFeedItemsServiceServer interface {
	mustEmbedUnimplementedFeedItemsServiceServer()
}

func RegisterFeedItemsServiceServer(s grpc.ServiceRegistrar, srv FeedItemsServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedItemsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedItemsService_ServiceDesc, srv)
}

func _FeedItemsService_CreateFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedItemsServiceServer).CreateFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedItemsService_CreateFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedItemsServiceServer).CreateFeedItem(ctx, req.(*FeedItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedItemsService_GetFeedItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedItemsServiceServer).GetFeedItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedItemsService_GetFeedItemByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedItemsServiceServer).GetFeedItemByID(ctx, req.(*GetFeedItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedItemsService_UpdateFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedItemsServiceServer).UpdateFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedItemsService_UpdateFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedItemsServiceServer).UpdateFeedItem(ctx, req.(*UpdateItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedItemsService_DeleteFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedItemsServiceServer).DeleteFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedItemsService_DeleteFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedItemsServiceServer).DeleteFeedItem(ctx, req.(*DeleteFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedItemsService_GetAllFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedItemsServiceServer).GetAllFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedItemsService_GetAllFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedItemsServiceServer).GetAllFeedItems(ctx, req.(*GetAllFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedItemsService_ServiceDesc is the grpc.ServiceDesc for FeedItemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedItemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repo.FeedItemsService",
	HandlerType: (*FeedItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedItem",
			Handler:    _FeedItemsService_CreateFeedItem_Handler,
		},
		{
			MethodName: "GetFeedItemByID",
			Handler:    _FeedItemsService_GetFeedItemByID_Handler,
		},
		{
			MethodName: "UpdateFeedItem",
			Handler:    _FeedItemsService_UpdateFeedItem_Handler,
		},
		{
			MethodName: "DeleteFeedItem",
			Handler:    _FeedItemsService_DeleteFeedItem_Handler,
		},
		{
			MethodName: "GetAllFeedItems",
			Handler:    _FeedItemsService_GetAllFeedItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeds/repos.proto",
}

const (
	FeedsService_CreateFeed_FullMethodName     = "/repo.FeedsService/CreateFeed"
	FeedsService_GetFeedByID_FullMethodName    = "/repo.FeedsService/GetFeedByID"
	FeedsService_UpdateFeed_FullMethodName     = "/repo.FeedsService/UpdateFeed"
	FeedsService_DeleteFeed_FullMethodName     = "/repo.FeedsService/DeleteFeed"
	FeedsService_GetAllFeeds_FullMethodName    = "/repo.FeedsService/GetAllFeeds"
	FeedsService_FetchFeedItems_FullMethodName = "/repo.FeedsService/FetchFeedItems"
)

// FeedsServiceClient is the client API for FeedsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedsServiceClient interface {
	CreateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*FeedResponse, error)
	GetFeedByID(ctx context.Context, in *GetFeedByIDRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	UpdateFeed(ctx context.Context, in *UpdateFeed, opts ...grpc.CallOption) (*FeedResponse, error)
	DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllFeeds(ctx context.Context, in *GetAllFeedsRequest, opts ...grpc.CallOption) (*FeedsResponse, error)
	FetchFeedItems(ctx context.Context, in *FetchFeedItemsRequest, opts ...grpc.CallOption) (*FetchFeedItemsResponse, error)
}

type feedsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedsServiceClient(cc grpc.ClientConnInterface) FeedsServiceClient {
	return &feedsServiceClient{cc}
}

func (c *feedsServiceClient) CreateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*FeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, FeedsService_CreateFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsServiceClient) GetFeedByID(ctx context.Context, in *GetFeedByIDRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, FeedsService_GetFeedByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsServiceClient) UpdateFeed(ctx context.Context, in *UpdateFeed, opts ...grpc.CallOption) (*FeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, FeedsService_UpdateFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsServiceClient) DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, FeedsService_DeleteFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsServiceClient) GetAllFeeds(ctx context.Context, in *GetAllFeedsRequest, opts ...grpc.CallOption) (*FeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedsResponse)
	err := c.cc.Invoke(ctx, FeedsService_GetAllFeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsServiceClient) FetchFeedItems(ctx context.Context, in *FetchFeedItemsRequest, opts ...grpc.CallOption) (*FetchFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchFeedItemsResponse)
	err := c.cc.Invoke(ctx, FeedsService_FetchFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedsServiceServer is the server API for FeedsService service.
// All implementations must embed UnimplementedFeedsServiceServer
// for forward compatibility.
type FeedsServiceServer interface {
	CreateFeed(context.Context, *Feed) (*FeedResponse, error)
	GetFeedByID(context.Context, *GetFeedByIDRequest) (*FeedResponse, error)
	UpdateFeed(context.Context, *UpdateFeed) (*FeedResponse, error)
	DeleteFeed(context.Context, *DeleteFeedRequest) (*EmptyResponse, error)
	GetAllFeeds(context.Context, *GetAllFeedsRequest) (*FeedsResponse, error)
	FetchFeedItems(context.Context, *FetchFeedItemsRequest) (*FetchFeedItemsResponse, error)
	mustEmbedUnimplementedFeedsServiceServer()
}

// UnimplementedFeedsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedsServiceServer struct{}

func (UnimplementedFeedsServiceServer) CreateFeed(context.Context, *Feed) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (UnimplementedFeedsServiceServer) GetFeedByID(context.Context, *GetFeedByIDRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedByID not implemented")
}
func (UnimplementedFeedsServiceServer) UpdateFeed(context.Context, *UpdateFeed) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedFeedsServiceServer) DeleteFeed(context.Context, *DeleteFeedRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (UnimplementedFeedsServiceServer) GetAllFeeds(context.Context, *GetAllFeedsRequest) (*FeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeeds not implemented")
}
func (UnimplementedFeedsServiceServer) FetchFeedItems(context.Context, *FetchFeedItemsRequest) (*FetchFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFeedItems not implemented")
}
func (UnimplementedFeedsServiceServer) mustEmbedUnimplementedFeedsServiceServer() {}
func (UnimplementedFeedsServiceServer) testEmbeddedByValue()                      {}

// UnsafeFeedsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedsServiceServer will
// result in compilation errors.
type UnsafeFeedsServiceServer interface {
	mustEmbedUnimplementedFeedsServiceServer()
}

func RegisterFeedsServiceServer(s grpc.ServiceRegistrar, srv FeedsServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedsService_ServiceDesc, srv)
}

func _FeedsService_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_CreateFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).CreateFeed(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedsService_GetFeedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).GetFeedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_GetFeedByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).GetFeedByID(ctx, req.(*GetFeedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedsService_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_UpdateFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).UpdateFeed(ctx, req.(*UpdateFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedsService_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_DeleteFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).DeleteFeed(ctx, req.(*DeleteFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedsService_GetAllFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).GetAllFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_GetAllFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).GetAllFeeds(ctx, req.(*GetAllFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedsService_FetchFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServiceServer).FetchFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedsService_FetchFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServiceServer).FetchFeedItems(ctx, req.(*FetchFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedsService_ServiceDesc is the grpc.ServiceDesc for FeedsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repo.FeedsService",
	HandlerType: (*FeedsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeed",
			Handler:    _FeedsService_CreateFeed_Handler,
		},
		{
			MethodName: "GetFeedByID",
			Handler:    _FeedsService_GetFeedByID_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _FeedsService_UpdateFeed_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _FeedsService_DeleteFeed_Handler,
		},
		{
			MethodName: "GetAllFeeds",
			Handler:    _FeedsService_GetAllFeeds_Handler,
		},
		{
			MethodName: "FetchFeedItems",
			Handler:    _FeedsService_FetchFeedItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeds/repos.proto",
}
